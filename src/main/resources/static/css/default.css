<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="de">
<head>
    <meta charset="UTF-8">
    <title>Server vergleichen</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" th:href="@{'/css/' + ${theme}}">
    <style>
        body {
            background-color: #1e1e2f;
            color: #ddd;
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            padding: 20px;
            margin: 0;
        }

        h1 {
            text-align: center;
            color: #4a90e2;
            border-bottom: 2px solid #4a90e2;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .container {
            display: flex;
            justify-content: space-between;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .server-panel {
            flex: 1;
            background-color: #2c2f48;
            padding: 1rem;
            border-radius: 10px;
            box-shadow: 0 3px 8px rgba(0,0,0,0.5);
            min-width: 300px;
        }

        .server-panel h2 {
            color: #7fbfff;
            margin-top: 0;
            margin-bottom: 0.5rem;
        }

        select {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #444;
            background-color: #1e1e2f;
            color: #fff;
            margin-bottom: 1rem;
        }

        canvas {
            width: 100% !important;
            height: 200px !important;
            background-color: #fff;
            border-radius: 6px;
            margin-bottom: 1rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            background-color: #1e1e2f;
        }

        th, td {
            border: 1px solid #4a90e2;
            padding: 0.5rem;
            text-align: center;
        }

        th {
            background-color: #2c2f48;
            color: #7fbfff;
        }

        td {
            color: #eee;
        }
    </style>
</head>
<body>

<h1>Serververgleich</h1>

<div class="container">
    <div class="server-panel">
        <h2>Server A</h2>
        <select id="serverASelect"></select>
        <canvas id="cpuChartA"></canvas>
        <canvas id="ramChartA"></canvas>
        <canvas id="diskChartA"></canvas>
        <table>
            <tr><th>CPU (%)</th><th>RAM (%)</th><th>Disk (%)</th></tr>
            <tr><td id="cpuAvgA">-</td><td id="ramAvgA">-</td><td id="diskAvgA">-</td></tr>
        </table>
    </div>

    <div class="server-panel">
        <h2>Server B</h2>
        <select id="serverBSelect"></select>
        <canvas id="cpuChartB"></canvas>
        <canvas id="ramChartB"></canvas>
        <canvas id="diskChartB"></canvas>
        <table>
            <tr><th>CPU (%)</th><th>RAM (%)</th><th>Disk (%)</th></tr>
            <tr><td id="cpuAvgB">-</td><td id="ramAvgB">-</td><td id="diskAvgB">-</td></tr>
        </table>
    </div>
</div>

<script>
    async function fetchServers() {
        const response = await fetch('/api/servers');
        return response.json();
    }

    async function fetchHistory(serverName) {
        const response = await fetch(`/api/server/${serverName}/history`);
        return response.json();
    }

    async function loadServerData(selectId, chartPrefix, tablePrefix) {
        const serverName = document.getElementById(selectId).value;
        const history = await fetchHistory(serverName);

        const labels = history.map(d => new Date(d.timestamp * 1000).toLocaleTimeString());
        const cpuData = history.map(d => d.cpu);
        const ramData = history.map(d => d.ram);
        const diskData = history.map(d => d.disk);

        drawChart(`${chartPrefix}cpuChart`, labels, cpuData, 'CPU (%)');
        drawChart(`${chartPrefix}ramChart`, labels, ramData, 'RAM (%)');
        drawChart(`${chartPrefix}diskChart`, labels, diskData, 'Disk (%)');

        document.getElementById(`${tablePrefix}cpuAvg`).textContent = avg(cpuData).toFixed(1);
        document.getElementById(`${tablePrefix}ramAvg`).textContent = avg(ramData).toFixed(1);
        document.getElementById(`${tablePrefix}diskAvg`).textContent = avg(diskData).toFixed(1);
    }

    function drawChart(id, labels, data, label) {
        const ctx = document.getElementById(id).getContext('2d');
        if (window[id]) window[id].destroy();
        window[id] = new Chart(ctx, {
            type: 'line',
            data: {
                labels,
                datasets: [{
                    label,
                    data,
                    fill: false,
                    borderColor: '#4a90e2',
                    backgroundColor: '#4a90e2',
                    tension: 0.1
                }]
            },
            options: {
                plugins: {
                    legend: { labels: { color: '#ddd' } }
                },
                scales: {
                    x: { ticks: { color: '#ccc' }, grid: { color: '#333' } },
                    y: { ticks: { color: '#ccc' }, grid: { color: '#333' } }
                }
            }
        });
    }

    function avg(arr) {
        return arr.reduce((a, b) => a + b, 0) / arr.length;
    }

    async function init() {
        const servers = await fetchServers();

        servers.forEach(server => {
            const opt1 = new Option(server.name, server.name);
            const opt2 = new Option(server.name, server.name);
            serverASelect.appendChild(opt1);
            serverBSelect.appendChild(opt2);
        });

        serverASelect.addEventListener('change', () => loadServerData('serverASelect', '', ''));
        serverBSelect.addEventListener('change', () => loadServerData('serverBSelect', 'B', 'B'));

        if (servers.length >= 2) {
            serverASelect.value = servers[0].name;
            serverBSelect.value = servers[1].name;
            loadServerData('serverASelect', '', '');
            loadServerData('serverBSelect', 'B', 'B');
        }
    }

    init();
</script>
</body>
</html>
